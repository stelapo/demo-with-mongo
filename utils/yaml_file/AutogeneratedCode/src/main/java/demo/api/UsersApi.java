/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package demo.api;

import demo.model.InlineResponse200;
import demo.model.User;
import demo.model.UserToCreate;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-11-27T12:30:07.687+01:00[Europe/Berlin]")
@Validated
@Api(value = "Users", description = "the Users API")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /user : creates a user
     * Creates a new user to the system
     *
     * @param userToCreate Inventory item to add (optional)
     * @return user created (status code 201)
     */
    @ApiOperation(value = "creates a user", nickname = "createUser", notes = "Creates a new user to the system", response = User.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "user created", response = User.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<User> createUser(@ApiParam(value = "Inventory item to add") @Valid @RequestBody(required = false) UserToCreate userToCreate) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"address\" : \"Via Rossi, Firenze\", \"surname\" : \"Rossi\", \"name\" : \"Mario\", \"userId\" : 1, \"email\" : \"infomr@afaef.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /user/{userId} : deletes a user
     * Deletes a user from the system
     *
     * @param userId  (required)
     * @return user deleted (status code 201)
     */
    @ApiOperation(value = "deletes a user", nickname = "deleteUser", notes = "Deletes a user from the system", tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "user deleted") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/user/{userId}"
    )
    default ResponseEntity<Void> deleteUser(@ApiParam(value = "", required = true) @PathVariable("userId") Integer userId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{userId} : get user by id
     *
     * @param userId  (required)
     * @return get user object (status code 200)
     *         or resource not found (status code 404)
     */
    @ApiOperation(value = "get user by id", nickname = "getUser", notes = "", response = User.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "get user object", response = User.class),
        @ApiResponse(code = 404, message = "resource not found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{userId}",
        produces = { "application/json" }
    )
    default ResponseEntity<User> getUser(@ApiParam(value = "", required = true) @PathVariable("userId") Integer userId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"address\" : \"Via Rossi, Firenze\", \"surname\" : \"Rossi\", \"name\" : \"Mario\", \"userId\" : 1, \"email\" : \"infomr@afaef.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users : searches users by name and by surname
     *
     * @param name  (optional)
     * @param surname  (optional)
     * @param page  (optional)
     * @param size  (optional)
     * @param sort  (optional)
     * @return search results matching criteria (status code 200)
     *         or bad input parameter (status code 400)
     */
    @ApiOperation(value = "searches users by name and by surname", nickname = "searchUsers", notes = "", response = InlineResponse200.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = InlineResponse200.class),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users",
        produces = { "application/json" }
    )
    default ResponseEntity<InlineResponse200> searchUsers(@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "surname", required = false) String surname,@ApiParam(value = "") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "") @Valid @RequestParam(value = "size", required = false) Integer size,@ApiParam(value = "") @Valid @RequestParam(value = "sort", required = false) String sort) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"content\" : [ { \"address\" : \"Via Rossi, Firenze\", \"surname\" : \"Rossi\", \"name\" : \"Mario\", \"userId\" : 1, \"email\" : \"infomr@afaef.com\" }, { \"address\" : \"Via Rossi, Firenze\", \"surname\" : \"Rossi\", \"name\" : \"Mario\", \"userId\" : 1, \"email\" : \"infomr@afaef.com\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /user : updates a user
     * Updates a user
     *
     * @param user Inventory item to update (optional)
     * @return user updated (status code 201)
     *         or resource not found (status code 404)
     */
    @ApiOperation(value = "updates a user", nickname = "updateUser", notes = "Updates a user", response = User.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "user updated", response = User.class),
        @ApiResponse(code = 404, message = "resource not found") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/user",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<User> updateUser(@ApiParam(value = "Inventory item to update") @Valid @RequestBody(required = false) User user) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"address\" : \"Via Rossi, Firenze\", \"surname\" : \"Rossi\", \"name\" : \"Mario\", \"userId\" : 1, \"email\" : \"infomr@afaef.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
