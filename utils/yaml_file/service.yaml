openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/lapo.pancani/lpancaniUser01/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/lapo.pancani/lpancani_user01/1.0.0
info:
  description: This is a simple User API
  version: "1.0.0"
  title: Simple User API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: users
    description: Operations available
paths:
  /users:
    get:
      tags:
        - users
      summary: searches users by name and by surname
      operationId: searchUsers
      parameters:
        - in: query
          name: name
          required: false
          schema:
            type: string
        - in: query
          name: surname
          required: false
          schema:
            type: string
        - in: query
          name: page
          required: false
          schema:
            type: integer
        - in: query
          name: size
          required: false
          schema:
            type: integer
        - in: query
          name: sort
          required: false
          schema:
            type: string
          example: "name,desc"
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
  
  /user/{userId}:
    get:
      tags:
        - users
      summary: get user by id
      operationId: getUser
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: get user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: resource not found
    put:
      tags:
        - users
      summary: updates a user
      operationId: updateUser
      description: Updates a user
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
      responses:
        '201':
          description: user updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: resource not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserToCreate'
        description: Inventory item to update
        required: true
    delete:
      tags:
        - users
      summary: deletes a user
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
      operationId: deleteUser
      description: Deletes a user from the system
      responses:
        '204':
          description: user deleted
        '404':
          description: resource not found

  /user:
    post:
      tags:
        - users
      summary: creates a user
      operationId: createUser
      description: Creates a new user to the system
      responses:
        '201':
          description: user created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserToCreate'
        description: Inventory item to add
        required: true

components:
  schemas:
    UserToCreate:
      type: object
      required:
        - name
        - surname
      properties:
        name:
          type: string
          example: Mario
        surname:
          type: string
          example: Rossi
        address:
          type: string
          example: Via Rossi, Firenze
        email:
          type: string
          format: email
          example: 'infomr@afaef.com'
    User:
      type: object
      required:
        - name
        - surname
      properties:
        userId:
          type: integer
          example: 1
        name:
          type: string
          example: Mario
        surname:
          type: string
          example: Rossi
        address:
          type: string
          example: Via Rossi, Firenze
        email:
          type: string
          format: email
          example: 'infomr@afaef.com'